/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number 
would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1 
 3: 1,3 
 6: 1,2,3,6 
10: 1,2,5,10 
15: 1,3,5,15 
21: 1,3,7,21 
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
Sample Input
4
1
2
3
4
Sample Output
3
6
6
28
*/

function processData(input) {
    //Enter your code here
    var t = parseInt(input), k=0;
    for(k=1; k<=t; k++){
        console.log(findTriangleNumberWithOverNDivisors(k));       
    }
} 

function generateTriangleNumber(n) {
    return (n * (n + 1)) / 2;
}

function findTriangleNumberWithOverNDivisors(t) {
    var nextTriangleNum;
    var sqrt;
    for (i = 2;; i++) {
        var factors = [];
        factors[0] = 1;
        nextTriangleNum = generateTriangleNumber(i);
        sqrt = Math.pow(nextTriangleNum, 0.5);
        sqrt = Math.floor(sqrt);
        var j;
        for (j = 2; j <= sqrt; j++) {
            //console.log(j+"|A|" +nextTriangleNum+"|"+sqrt+"|"+ factors);
            if (nextTriangleNum % j == 0) {
                var quotient = nextTriangleNum / j;
                factors[factors.length] = j;
                factors[factors.length] = quotient;
            //console.log(j+"|B|" + factors);
            }
        }
        factors[factors.length] = nextTriangleNum;
            //console.log(j+"|C|" + factors);
        if (factors.length > t) {
            //console.log(i+"|"+j +"|"+ sqrt +"|"+ factors);
            break;
        }
    }  
   return nextTriangleNum;
}
